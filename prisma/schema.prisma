generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String     @id @default(uuid())
  name                String
  imageUrl            String
  deliveryFee         Decimal    @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  categories          Category[]
  products            Product[]
  orders              Order[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  restaurants Restaurant[]
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id                 String     @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal    @db.Decimal(10, 2)
  discountPercentage Int        @default(0)
  restaurantId       String
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category   @relation(fields: [categoryId], references: [id])
  createdAt          DateTime   @default(now())
  orders             Order[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  products      Product[]
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  deliveryFee   Decimal     @db.Decimal(10, 2)
  deliveryTime  Int
  subtotalPrice Decimal     @db.Decimal(10, 2)
  totalPrice    Decimal     @db.Decimal(10, 2)
  totalDiscount Decimal     @db.Decimal(10, 2)
  status        OrderStatus
  createdAt     DateTime    @default(now())
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  DELIVERING
  FINISHED
  CANCELED
}
