generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String     @id @default(uuid())
  name                String
  imageUrl            String
  deliveryFee         Decimal    @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  categories          Category[]
  products            Product[]
  orders              Order[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  restaurants Restaurant[]
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal        @db.Decimal(10, 2)
  discountPercentage Int            @default(0)
  restaurantId       String
  restaurant         Restaurant     @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category       @relation(fields: [categoryId], references: [id])
  createdAt          DateTime       @default(now())
  orderProducts      OrderProduct[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  deliveryFee   Decimal        @db.Decimal(10, 2)
  deliveryTime  Int
  subtotalPrice Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  totalDiscount Decimal        @db.Decimal(10, 2)
  status        OrderStatus
  createdAt     DateTime       @default(now())
  products      OrderProduct[]
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  DELIVERING
  FINISHED
  CANCELED
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}
